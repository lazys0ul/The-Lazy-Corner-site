{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udc3c Welcome to The Lazy's Corner!","text":""},{"location":"#surviving-the-semester-one-page-at-a-time","title":"Surviving the semester one page at a time.","text":"<p>This site is built to serve as a central academic resource for IMSc Mathematics and Computing. Use the sidebar to navigate subject-wise notes, modules, and resources.</p>"},{"location":"#essential-documents","title":"\ud83d\udccc Essential Documents","text":"<p>Frequently used semester-wide resources:</p> <ul> <li>Syllabus Overview</li> <li>Class Schedule</li> <li>Holiday List</li> <li>Notices &amp; Announcements</li> </ul> About the Creator <p>Maintained by Pranav \u2014 IMSc Mathematics and Computing student.</p> <p>This project aims to consolidate important academic resources and semester content in one place.</p> <p>Tech stack used:</p> <ul> <li>MkDocs + Material theme</li> <li>HTML, CSS, and animation.css</li> <li>Backend and interactive features in progress</li> </ul> <p>Socials: -  Instagram -  GitHub -  Discord: <code>common.noun</code></p>"},{"location":"sem-2/CS101/","title":"CS101 \u2013 Programming for Problem Solving \ud83d\udcbb","text":"<p>Welcome to the CS101 corner of The Lazy's Corner! This page is designed to give you a head start in the subject, whether you're a fresher, a junior, or someone brushing up their C basics.</p>"},{"location":"sem-2/CS101/#what-to-expect-from-this-course","title":"What to Expect from This Course","text":"<p>You'll start from scratch like learning how computers interpret instructions, how to write and structure code logically, and how to implement real-world algorithms in C. It may feel a bit overwhelming at first, especially if you're new to coding, but trust me, once you start solving problems, it becomes addictive.</p>"},{"location":"sem-2/CS101/#from-my-experience","title":"From My Experience","text":"<ul> <li>In lab sessions, we used PuTTY (Linux terminal over SSH) to code and compile our C programs. So, get comfortable with the command line! you can also use putty in windows by adding WSL through the command prmpt.</li> <li>Outside labs, feel free to explore with IDEs like Code::Blocks, Dev-C++, or Visual Studio Code you can pick whatever feels right.</li> <li>Practice is key. Try coding small logic snippets daily. Even simple programs like reversing a string help in building confidence.</li> <li>If you\u2019re ever stuck then trust Stack Overflow, GeeksforGeeks, and even YouTube walkthroughs.</li> </ul>"},{"location":"sem-2/CS101/#official-syllabus-overview","title":"Official Syllabus Overview","text":"<p>(Just a bird eye view for the topic, the comprehensive syllabus is already available on the home page.)</p>"},{"location":"sem-2/CS101/#module-i-intro-to-programming-problem-solving","title":"Module I \u2013 Intro to Programming &amp; Problem Solving","text":"<ul> <li>What makes a computer tick: memory, CPU, compilers, OS</li> <li>Algorithms, flowcharts, pseudo-code</li> <li>Errors in compilation, memory variables, data types</li> </ul>"},{"location":"sem-2/CS101/#module-ii-conditions-loops","title":"Module II \u2013 Conditions &amp; Loops","text":"<ul> <li>Arithmetic expressions</li> <li>Branching (if-else), loops (while, for)</li> <li>Writing and evaluating conditionals</li> </ul>"},{"location":"sem-2/CS101/#module-iii-arrays-problem-solving","title":"Module III \u2013 Arrays &amp; Problem Solving","text":"<ul> <li>1D &amp; 2D Arrays, strings</li> <li>Case studies: Matrix addition, root finding, sorting &amp; searching</li> </ul>"},{"location":"sem-2/CS101/#module-iv-functions-recursion","title":"Module IV \u2013 Functions &amp; Recursion","text":"<ul> <li>Function calls, library usage</li> <li>Call by value/reference</li> <li>Recursion: factorial, Fibonacci, Ackermann's function</li> </ul>"},{"location":"sem-2/CS101/#module-v-structures-pointers-file-handling","title":"Module V \u2013 Structures, Pointers &amp; File Handling","text":"<ul> <li>Declaring structures &amp; arrays of structures</li> <li>Pointers &amp; self-referential structures</li> <li>Basics of file read/write operations</li> </ul>"},{"location":"sem-2/CS101/#course-recommended-books","title":"Course Recommended Books","text":"<ol> <li>Problem Solving and Program Design in C \u2013 Jeri R. Hanly (Pearson)</li> <li>Programming with C \u2013 Byron Gottfried (Schaum's Outline)</li> <li>Programming in ANSI C \u2013 E. Balaguruswamy</li> <li>How to Solve it by Computer \u2013 R.G. Dromey</li> </ol> <p>Reference: The C Programming Language \u2013 Kernighan &amp; Ritchie</p>"},{"location":"sem-2/CS101/#suggested-video-lectures","title":"\ud83c\udfa5 Suggested Video Lectures","text":"<p>\ud83d\udd27 How to Set Up Linux WSL on Windows (YouTube)  For lectues on C and programming you can visit : Neso Academy, CodeWithHarry, MyCodeSchool, Jenny\u2019s Lectures  and don't worry you can choose whatever you like... the prof. will ask questions you would've never imagined anyway ;)</p>"},{"location":"sem-2/CS101/#explore-modules","title":"\ud83e\udde9 Explore Modules","text":"<ul> <li>Module 1: Basics and Setup</li> <li>Module 2: Conditionals &amp; Loops</li> <li>(more modules will be added shortly)</li> </ul> <p>Happy coding!  Stay lazy, stay smart. \ud83d\ude09 \u2014 LazySoul</p>"},{"location":"sem-2/CS101/#note-the-resources-and-the-content-to-be-learned-will-be-uploaded-in-a-different-pdf-files-shared-by-your-super-seniors-and-seniors-under-the-resources-section-so-i-am-not-adding-anything-else-here-same-will-be-the-case-for-the-rest-of-the-modules-these-folders-for-modules-will-only-contain-the-syllabus-to-learn-and-theory-quiz-with-coding-problems","title":"NOTE : The resources and the content to be learned will be uploaded in a different pdf files shared by your super seniors and seniors under the resources section so I am not adding anything else here same will be the case for the rest of the modules these folders for Modules will only contain the syllabus to learn and theory quiz with coding problems","text":""},{"location":"sem-2/CS101/Module%201/","title":"\ud83d\udcd8 Module I \u2014 Introduction to Programming","text":""},{"location":"sem-2/CS101/Module%201/#introduction-to-programming","title":"Introduction to Programming","text":"<p>This module introduces you to the core components of a computer system, including:</p> <ul> <li>Disks </li> <li>Memory </li> <li>Processor </li> <li>Where a program is stored and executed</li> <li>Basic understanding of Operating Systems and Compilers</li> </ul>"},{"location":"sem-2/CS101/Module%201/#problem-solving","title":"Problem Solving","text":"<p>Learn to approach problems logically and mathematically.</p> <ul> <li>Understand the steps to solve logical and numerical problems</li> <li>Break down problems into smaller, manageable parts</li> </ul>"},{"location":"sem-2/CS101/Module%201/#representation-of-algorithms","title":"Representation of Algorithms","text":"<p>Develop skills to represent logic using:</p> <ul> <li>Flowcharts </li> <li>Pseudocode</li> </ul> <p>\u2714\ufe0f Includes practical examples for both formats.</p>"},{"location":"sem-2/CS101/Module%201/#from-algorithms-to-programs","title":"From Algorithms to Programs","text":"<p>Understand how to translate logic into actual code.</p> <ul> <li>What is Source Code</li> <li>Role of Variables and Data Types</li> <li>How data is stored in memory locations</li> <li>Identify Syntax Errors and Logical Errors</li> <li>Learn the compilation process:</li> <li>Object code</li> <li>Executable code</li> </ul>"},{"location":"sem-3/pe309/Module%201/","title":"Definitions and Basic Terms","text":""}]}